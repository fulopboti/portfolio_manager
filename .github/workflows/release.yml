name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.11, 3.12]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
    
    - name: Run comprehensive tests
      run: |
        # Code quality checks
        python -m ruff check portfolio_manager/
        python -m black --check portfolio_manager/
        python -m isort --check-only portfolio_manager/
        python -m mypy portfolio_manager/
        
        # Security scan
        python -m bandit -r portfolio_manager/
        
        # Test suite with coverage
        python tests/run_tests.py coverage

  build:
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history for proper versioning
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine wheel
    
    - name: Build distribution
      run: python -m build
    
    - name: Verify distribution
      run: |
        twine check dist/*
        # Verify wheel can be installed
        pip install dist/*.whl
        portfolio-manager --version
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: distribution-files
        path: dist/

  release:
    needs: [test, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution-files
        path: dist/
    
    - name: Extract version from tag
      id: version
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "is_prerelease=$(echo $VERSION | grep -q -E '(alpha|beta|rc)' && echo true || echo false)" >> $GITHUB_OUTPUT
    
    - name: Generate release notes
      id: release_notes
      run: |
        # Extract release notes from CHANGELOG.md if it exists
        if [ -f CHANGELOG.md ]; then
          # Get content between current version and previous version
          sed -n "/## \[${{ steps.version.outputs.version }}\]/,/## \[/p" CHANGELOG.md | head -n -1 > release_notes.md
        else
          echo "Release ${{ steps.version.outputs.version }}" > release_notes.md
          echo "" >> release_notes.md
          echo "Automatically generated from tag ${{ github.ref_name }}" >> release_notes.md
        fi
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        name: "Portfolio Manager ${{ steps.version.outputs.version }}"
        body_path: release_notes.md
        files: |
          dist/*.whl
          dist/*.tar.gz
        prerelease: ${{ steps.version.outputs.is_prerelease == 'true' }}
        generate_release_notes: true
        make_latest: ${{ steps.version.outputs.is_prerelease == 'false' }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  publish-pypi:
    needs: [test, build, release]
    runs-on: ubuntu-latest
    if: ${{ !contains(github.ref_name, 'alpha') && !contains(github.ref_name, 'beta') && !contains(github.ref_name, 'rc') }}
    environment:
      name: pypi
      url: https://pypi.org/project/portfolio-manager/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution-files
        path: dist/
    
    - name: Publish to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        password: ${{ secrets.PYPI_API_TOKEN }}
        verbose: true

  publish-test-pypi:
    needs: [test, build, release]
    runs-on: ubuntu-latest
    if: ${{ contains(github.ref_name, 'alpha') || contains(github.ref_name, 'beta') || contains(github.ref_name, 'rc') }}
    environment:
      name: test-pypi
      url: https://test.pypi.org/project/portfolio-manager/
    
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: distribution-files
        path: dist/
    
    - name: Publish to Test PyPI
      uses: pypa/gh-action-pypi-publish@release/v1
      with:
        repository-url: https://test.pypi.org/legacy/
        password: ${{ secrets.TEST_PYPI_API_TOKEN }}
        verbose: true

  notify:
    needs: [release, publish-pypi]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.release.result == 'success' }}
      run: |
        echo "‚úÖ Release ${{ github.ref_name }} completed successfully!"
        echo "üì¶ GitHub Release: ${{ github.server_url }}/${{ github.repository }}/releases/tag/${{ github.ref_name }}"
        
        if [ "${{ needs.publish-pypi.result }}" == "success" ]; then
          echo "üêç PyPI: https://pypi.org/project/portfolio-manager/"
        fi
    
    - name: Notify on failure  
      if: ${{ needs.release.result == 'failure' || needs.publish-pypi.result == 'failure' }}
      run: |
        echo "‚ùå Release ${{ github.ref_name }} failed!"
        echo "Please check the workflow logs for details."